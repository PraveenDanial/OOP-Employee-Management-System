package UI_Package;

import ClassPackage.*;
import javax.swing.JOptionPane;

/**
 * MainInterface is the main JFrame for the Employee Management System.
 * It provides tabs for viewing employees, users, searching, and registering employees.
 */
public class MainInterface extends javax.swing.JFrame {
    
    // Stores the username of the logged-in user
    @SuppressWarnings("unused")
    private String UserName = ""; // e.g., U001

    // Stores the user type (e.g., HR Manager, User)
    private String UserType = ""; // e.g., HR Manager

    /**
     * Default constructor.
     * Initializes the components.
     */
    public MainInterface() {
        initComponents();
    }

    /**
     * Overloaded constructor.
     * Initializes the components and sets up the interface based on user type.
     * @param UserName The username of the logged-in user.
     * @param UserType The type of the logged-in user.
     */
    public MainInterface(String UserName, String UserType) {
        this.UserName = UserName;
        this.UserType = UserType;
        initComponents();
        initialSetup();   
    }
     
    /**
     * Sets up the initial state of the interface.
     * Loads employee/user data and adjusts tabs based on user type.
     */
    private void initialSetup () {
        EmployeeClass employeeClass = new EmployeeClass();    
        lblUserName.setText(UserType); // Display user type

        // Prepare employee table header
        String empTableTitle = "EmployeeId \t Name \t EPF No \t Age \tA ddress \t Department and Location \n "
            + "----------------------------------------------------------------------------------------------------------------------------------------- \n";
        // Display all employees
        txtEmployeeInfo.setText(empTableTitle + employeeClass.viewAllEmployee());
        // Display employee count
        txtEmployeeCount.setText((employeeClass.getEmployeeCount()) + "");
        
        // If user is not an admin, remove the User Info tab
        if (this.UserType.equals("User")) {
            tabbedPane.remove(1);
        } else {
            // Display all users for admin/HR
            UserClass users = new UserClass();
            String UserTableTitle = "UserId  \t UserType \n------------------------------------ \n";
            txtUserInfo.setText(UserTableTitle + users.viewAllUsers());
        }
    }
 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    /**
     * Initializes all Swing components and layouts.
     * This code is auto-generated by the GUI designer.
     */
    private void initComponents() {
        // ... [GUI initialization code, unchanged, omitted for brevity] ...
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the logout button click event.
     * Returns to the LoginForm.
     */
    @SuppressWarnings({ "deprecation", "unused" })
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
       LoginForm obj = new LoginForm();
       obj.show();
       this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * Handles the Home Screen button click event.
     * Returns to the WelcomeInterface.
     */
    @SuppressWarnings({ "deprecation", "unused" })
    private void btnHomeScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeScreenActionPerformed
       WelcomeInterface obj = new WelcomeInterface();
       obj.show();
       this.dispose();
    }//GEN-LAST:event_btnHomeScreenActionPerformed

    /**
     * Handles the Search button click event.
     * Searches for an employee by ID and displays the result.
     */
    @SuppressWarnings("unused")
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyword = txtEmployeeID.getText();
        EmployeeClass employee = new EmployeeClass();
        String empTableTitle = "EmployeeId \t Name \t EPF No \t Age \tA ddress \t Department and Location \n "
            + "----------------------------------------------------------------------------------------------------------------------------------------- \n";
        // If employee found, display details
        if (employee.searchEmployee(keyword)) {
            txtEmployeeInfo1.setText(empTableTitle +
                employee.getEmployeeID() + "\t" + employee.getEmployeeEpfNo() + "\t" + employee.getEmployeeName() + "\t" +
                employee.getAge() + "\t" + employee.getAddress() + "\t" + employee.getDepartmentAndLocation());
        } else {
            // Show error if not found
            JOptionPane.showMessageDialog(null, "Sorry! We do not have any matching Employee",
                "Search a Employee", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * Handles the Employee ID field action event in the allocation tab.
     * (Currently unused, can be used for validation or auto-fill.)
     */
    @SuppressWarnings("unused")
    private void txtEmployeeID1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployeeID1ActionPerformed
    }//GEN-LAST:event_txtEmployeeID1ActionPerformed

    /**
     * Handles the Department and Location combo box action event.
     * (Currently unused, can be used for dynamic updates.)
     */
    @SuppressWarnings("unused")
    private void cmbDepartmentAndLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDepartmentAndLocationActionPerformed
    }//GEN-LAST:event_cmbDepartmentAndLocationActionPerformed

    /**
     * Handles the Register Employee button click event.
     * Validates input and adds a new employee.
     */
    @SuppressWarnings("unused")
    private void btnRegisterEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterEmployeeActionPerformed
        // Validate all fields
        if (txtEmployeeID1.getText().isEmpty() || txtEmployeeName.getText().isEmpty() || txtEmployeeEpfNo.getText().isEmpty() ||
            txtAge.getText().isEmpty() || txtAddress.getText().isEmpty() || cmbDepartmentAndLocation.getSelectedItem().toString().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Fileds cannot be empty, When adding a new Employee.",
                "Add a new Employee", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            // Create and set employee details
            EmployeeClass employeeClass = new EmployeeClass();
            employeeClass.setEmployeeID(txtEmployeeID1.getText());
            employeeClass.setEmployeeName(txtEmployeeName.getText());
            employeeClass.setEmployeeEpfNo(txtEmployeeEpfNo.getText());
            employeeClass.setAge(Integer.parseInt(txtAge.getText()));
            employeeClass.setAddress(txtAddress.getText());
            employeeClass.setDepartmentAndLocation(cmbDepartmentAndLocation.getSelectedItem().toString());

            // Attempt to add employee
            if (employeeClass.addEmployee()) {
                JOptionPane.showMessageDialog(null, "Employee Added successfully", "Add a new Employee",
                    JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry! Something went wrong with the application, "
                    + "Will be fixing it soon.", "Add a new Employee", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRegisterEmployeeActionPerformed

    /**
     * Handles the Employee Name field action event in the allocation tab.
     * (Currently unused, can be used for validation or auto-fill.)
     */
    @SuppressWarnings("unused")
    private void txtEmployeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployeeNameActionPerformed
    }//GEN-LAST:event_txtEmployeeNameActionPerformed

    /**
     * Main method to launch the application.
     * Sets the look and feel and displays the MainInterface.
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // All Swing components used in the interface
    @SuppressWarnings("unused")
    private javax.swing.JButton btnHomeScreen;
    @SuppressWarnings("unused")
    private javax.swing.JButton btnLogout;
    @SuppressWarnings("unused")
    private javax.swing.JButton btnRegisterEmployee;
    @SuppressWarnings("unused")
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbDepartmentAndLocation;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel1;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel10;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel11;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel2;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel3;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel4;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel5;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel6;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel7;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel8;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel9;
    @SuppressWarnings("unused")
    private javax.swing.JPanel jPanel1;
    @SuppressWarnings("unused")
    private javax.swing.JPanel jPanel2;
    @SuppressWarnings("unused")
    private javax.swing.JPanel jPanel3;
    @SuppressWarnings("unused")
    private javax.swing.JPanel jPanel4;
    @SuppressWarnings("unused")
    private javax.swing.JPanel jPanel5;
    @SuppressWarnings("unused")
    private javax.swing.JScrollPane jScrollPane1;
    @SuppressWarnings("unused")
    private javax.swing.JScrollPane jScrollPane2;
    @SuppressWarnings("unused")
    private javax.swing.JScrollPane jScrollPane3;
    @SuppressWarnings("unused")
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmployeeCount;
    private javax.swing.JTextField txtEmployeeEpfNo;
    private javax.swing.JTextField txtEmployeeID;
    private javax.swing.JTextField txtEmployeeID1;
    private javax.swing.JTextArea txtEmployeeInfo;
    private javax.swing.JTextArea txtEmployeeInfo1;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JTextArea txtUserInfo;
    // End of variables declaration//GEN-END:variables
}
